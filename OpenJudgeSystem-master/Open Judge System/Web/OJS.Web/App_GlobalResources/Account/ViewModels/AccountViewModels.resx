<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Current_password" xml:space="preserve">
    <value>Current password</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email address</value>
  </data>
  <data name="Email_invalid" xml:space="preserve">
    <value>Invalid email address</value>
  </data>
  <data name="Email_required" xml:space="preserve">
    <value>Please enter your email address</value>
  </data>
  <data name="Enter_new_password_confirmation" xml:space="preserve">
    <value>Please confirm your new password</value>
  </data>
  <data name="Enter_new_password_validation" xml:space="preserve">
    <value>Please enter your new password</value>
  </data>
  <data name="Enter_password" xml:space="preserve">
    <value>Please enter your password</value>
  </data>
  <data name="Enter_password_validation" xml:space="preserve">
    <value>Please enter your current password</value>
  </data>
  <data name="Invalid_username_or_password" xml:space="preserve">
    <value>Invalid username or password</value>
  </data>
  <data name="New_password" xml:space="preserve">
    <value>New password</value>
  </data>
  <data name="New_password_confirmation" xml:space="preserve">
    <value>Confirm new password</value>
  </data>
  <data name="New_password_confirm_password_not_matching_validation" xml:space="preserve">
    <value>The new password and confirmation password do not match</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Passwords_dont_match" xml:space="preserve">
    <value>The passwords don't match</value>
  </data>
  <data name="Password_confirm" xml:space="preserve">
    <value>Confirm your password</value>
  </data>
  <data name="Password_length_validation_message" xml:space="preserve">
    <value>The password must be at least {2} characters long.</value>
  </data>
  <data name="Remember_me" xml:space="preserve">
    <value>Remember me?</value>
  </data>
  <data name="Username" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="Username_required" xml:space="preserve">
    <value>Username is required</value>
  </data>
  <data name="Username_validation" xml:space="preserve">
    <value>The username must be between {2} and {1} characters long</value>
  </data>
  <data name="Email_already_registered" xml:space="preserve">
    <value>This email has already been registered</value>
  </data>
  <data name="User_already_registered" xml:space="preserve">
    <value>This username is not available</value>
  </data>
  <data name="Password_incorrect" xml:space="preserve">
    <value>Incorrect password</value>
  </data>
  <data name="Email_confirm" xml:space="preserve">
    <value>Confirm your email</value>
  </data>
  <data name="Email_confirmation_invalid" xml:space="preserve">
    <value>Please double check the email address that you entered</value>
  </data>
  <data name="Email_confirmation_required" xml:space="preserve">
    <value>Please confirm your email</value>
  </data>
  <data name="Password_required" xml:space="preserve">
    <value>Please enter your password</value>
  </data>
  <data name="Incorrect_password" xml:space="preserve">
    <value>Incorrect password</value>
  </data>
  <data name="Username_regex_validation" xml:space="preserve">
    <value>The username can contain only latin characters, numbers and the symbols '.' or '_'. The username must start with a letter and end with a letter or number.</value>
  </data>
  <data name="Username_confirmation" xml:space="preserve">
    <value>Confirm the new username</value>
  </data>
  <data name="Username_confirmation_incorrect" xml:space="preserve">
    <value>The usernames do not match</value>
  </data>
</root>